import { log } from './GeneralUtils';
import Settings from './Settings';
import AppUtils from './AppUtils';
import { PushNotification, PushNotificationIOS } from 'react-native-push-notification';
import Utils from './JCal/Utils';

export function configureNotifier() {
    PushNotification.configure({

        // (optional) Called when Token is generated (iOS and Android)
        onRegister: function (token) {
            log('TOKEN:', token);
        },

        // (required) Called when a remote or local notification is opened or received
        onNotification: async function (notification) {
            log('NOTIFICATION:', notification);

            // process the notification
            const settings = await Settings.getSettings(),
                activeAlarms = settings.activeAlarms,
                activeAlarm = activeAlarms.find(al => al.title === notification.message);
            //Set next alarm
            if (activeAlarm) {
                addNextNotification(activeAlarm, settings.location);
            }

            // required on iOS only (see fetchCompletionHandler docs: https://facebook.github.io/react-native/docs/pushnotificationios.html)
            notification.finish(PushNotificationIOS.FetchResult.NoData);
        },

        // ANDROID ONLY: GCM or FCM Sender ID (product_number) (optional - not required for local notifications, but is need to receive remote push notifications)
        senderID: "YOUR GCM (OR FCM) SENDER ID",

        // IOS ONLY (optional): default: all - Permissions to register.
        permissions: {
            alert: true,
            badge: true,
            sound: true
        },

        // Should the initial notification be popped automatically
        // default: true
        popInitialNotification: true,

        /**
          * (optional) default: true
          * - Specified if permissions (ios) and token (android and ios) will requested or not,
          * - if not, you must call PushNotificationsHandler.requestPermissions() later
          */
        requestPermissions: true,
    });
}

/**
 * Schedules the upcoming notification for the given Zman type
 * @param {{title:String, text:String, zmanName:String, alarmOffset:int, days:[]}} activeAlarm 
 * @param {Location} location
 */
export function addNextNotification(activeAlarm, location) {
    //Start with now. Note, if the current time is after the zman time, tomorrows zman will be returned.
    let nextDate = AppUtils.getNextZmanTime(activeAlarm.zmanName, new Date(), location);
    if (activeAlarm.days.length && !activeAlarm.days.includes(nextDate.getDay())) {
        while (!activeAlarm.days.includes(nextDate.getDay())) {
            nextDate = AppUtils.getNextZmanTime(activeAlarm.zmanName, Utils.addDaysToSdate(1), location)
        }
    }
    PushNotification.localNotificationSchedule({
        date: nextDate,
        message: activeAlarm.title,
        /* Android Only Properties */
        //id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
        ticker: "Zmain Alarm", // (optional)
        //autoCancel: true, // (optional) default: true
        //largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
        //smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
        //bigText: activeAlarm.title, // (optional) default: "message" prop
        subText: activeAlarm.text, // (optional) default: none
        //color: "red", // (optional) default: system default
        //vibrate: true, // (optional) default: true
        //vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
        //tag: 'some_tag', // (optional) add tag to message
        //group: "group", // (optional) add group to message
        ongoing: false, // (optional) set whether this is an "ongoing" notification
        //priority: "high", // (optional) set notification priority, default: high
        //visibility: "private", // (optional) set notification visibility, default: private
        //importance: "high", // (optional) set notification importance, default: high

        /* iOS only properties */
        //alertAction: // (optional) default: view
        //category: // (optional) default: null
        //userInfo: // (optional) default: null (object containing additional notification data)

        /* iOS and Android properties */
        title: activeAlarm.title, // (optional)
        //message: activeAlarm.message, // (required)
        playSound: true, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        //repeatType: 'day', // (optional) Repeating interval. Check 'Repeating Notifications' section for more info.
        //actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
    });
}

/**
 * Clears all scheduled notifications and generates the next instance for all active alarms.
 * @param {Settings} settings 
 */
export function regenerateAll(settings) {
    PushNotification.cancelAllLocalNotifications();
    for (let a in settings.activeAlarms) {
        addNextNotification(a, settings.location);
    }
}